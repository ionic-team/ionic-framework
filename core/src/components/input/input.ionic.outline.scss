@use "../../themes/ionic/ionic.globals.scss" as globals;

// Input Fill: Outline (Ionic Theme)
// ----------------------------------------------------------------

:host(.input-fill-outline) {
  --border-radius: #{globals.$ion-border-radius-100};
  --padding-start: #{globals.$ion-space-300};
  --padding-end: #{globals.$ion-space-300};
}

:host(.input-fill-outline.input-size-large) {
  --padding-start: #{globals.$ion-space-400};
  --padding-end: #{globals.$ion-space-400};
}

:host(.input-fill-outline.input-size-xlarge) {
  --padding-start: #{globals.$ion-space-500};
  --padding-end: #{globals.$ion-space-500};
}

/**
 * The bottom content should never have
 * a border with the outline style.
 */
:host(.input-fill-outline) .input-bottom {
  border-top: none;
}

:host(.input-fill-outline) .input-wrapper {
  /**
   * For the ionic theme, the padding needs to sit on the
   * native wrapper instead, so that it sits within the
   * outline container but does not always affect the
   * label text.
   */
  @include globals.padding(0);

  /**
   * Outline inputs do not have a bottom border.
   * Instead, they have a border that wraps the
   * input + label.
   */
  border-bottom: none;

  /**
   * Do not show a background on the input wrapper as
   * this includes the label, instead we apply the
   * background to the native wrapper.
   */
  background: transparent;
}

:host(.input-fill-outline.input-label-placement-stacked) .label-text-wrapper {
  @include globals.transform-origin(start, top);

  /**
   * Label text should not extend
   * beyond the bounds of the input.
   */
  max-width: calc(100% - var(--padding-start) - var(--padding-end));
}

:host(.input-fill-outline) .label-text-wrapper {
  /**
   * The label should appear on top of an outline
   * container that overlaps it so it is always clickable.
   */
  position: relative;
}

:host(.input-fill-outline) .native-wrapper {
  @include globals.border-radius(inherit);
  @include globals.padding(var(--padding-top), var(--padding-end), var(--padding-bottom), var(--padding-start));

  min-height: globals.$ion-scale-1000;

  /**
  * Apply the background to the native input
  * wrapper to only style the input.
  */
  background: var(--background);
}

// Input Fill: Outline, Outline Container
// ----------------------------------------------------------------

:host(.input-fill-outline) .input-outline {
  @include globals.position(0, 0, 0, 0);
  @include globals.border-radius(var(--border-radius));

  position: absolute;

  width: 100%;
  height: 100%;

  pointer-events: none;

  border: var(--border-width) var(--border-style) var(--border-color);
}

// Input Fill: Outline, Label Placement: Stacked
// ----------------------------------------------------------------

// This makes the label sit above the input.
:host(.label-floating.input-fill-outline.input-label-placement-stacked) .label-text-wrapper {
  @include globals.margin(0);
  @include globals.padding(globals.$ion-space-100, null);
}

// Start/End Slots
// ----------------------------------------------------------------

:host(.input-fill-outline) ::slotted([slot="start"]) {
  margin-inline-end: globals.$ion-space-200;
}

:host(.input-fill-outline) ::slotted([slot="end"]) {
  margin-inline-start: globals.$ion-space-200;
}

// Input Shapes
// --------------------------------------------------

:host(.input-fill-outline.input-shape-soft) {
  --border-radius: #{globals.$ion-border-radius-200};
}

:host(.input-fill-outline.input-shape-round) {
  --border-radius: #{globals.$ion-border-radius-400};
}

:host(.input-fill-outline.input-shape-rectangular) {
  --border-radius: #{globals.$ion-border-radius-0};
}

// Input Focus
// ----------------------------------------------------------------

:host(.input-fill-outline.has-focus) {
  --border-width: #{globals.$ion-border-size-050};
}
