@import "./input.vars";

// Input
// --------------------------------------------------

:host {
  /**
   * @prop --background: Background of the input
   *
   * @prop --color: Color of the input text
   *
   * @prop --padding-top: Top padding of the input
   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the input
   * @prop --padding-bottom: Bottom padding of the input
   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the input
   *
   * @prop --placeholder-color: Color of the input placeholder text
   * @prop --placeholder-font-style: Font style of the input placeholder text
   * @prop --placeholder-font-weight: Font weight of the input placeholder text
   * @prop --placeholder-opacity: Opacity of the input placeholder text
   *
   * @prop --highlight-color-focused: The color of the highlight on the input when focused
   * @prop --highlight-color-valid: The color of the highlight on the input when valid
   * @prop --highlight-color-invalid: The color of the highlight on the input when invalid
   *
   * @prop --border-color: Color of the border below the input when using helper text, error text, or counter
   * @prop --border-radius: Radius of the input
   * @prop --border-style: Color of the border below the input when using helper text, error text, or counter
   * @prop --border-width: Color of the border below the input when using helper text, error text, or counter
   */
  --placeholder-color: initial;
  --placeholder-font-style: initial;
  --placeholder-font-weight: initial;
  --placeholder-opacity: .5;
  --padding-top: 0px;
  --padding-end: 0px;
  --padding-bottom: 0px;
  --padding-start: 0px;
  --background: transparent;
  --color: initial;
  --border-style: solid;
  --highlight-color-focused: #{ion-color(primary, base)};
  --highlight-color-valid: #{ion-color(success, base)};
  --highlight-color-invalid: #{ion-color(danger, base)};

  display: block;

  position: relative;

  width: 100%;

  /* stylelint-disable-next-line all */
  padding: 0 !important;

  background: var(--background);
  color: var(--color);

  font-family: $font-family-base;

  z-index: $z-index-item-input;
}

:host(.legacy-input) {
  display: flex;

  flex: 1;
  align-items: center;
}

:host(.legacy-input) .native-input {
  @include padding(var(--padding-top), var(--padding-end), var(--padding-bottom), var(--padding-start));
}

:host-context(ion-item:not(.item-label)) {
  --padding-start: 0;
}

:host(.ion-color) {
  color: current-color(base);
}

// Native Text Input
// --------------------------------------------------

.native-input {
  @include border-radius(var(--border-radius));
  @include padding(0, 0, 0, 0);
  @include text-inherit();

  display: inline-block;

  flex: 1;

  width: 100%;
  max-width: 100%;
  max-height: 100%;

  border: 0;

  outline: none;

  background: transparent;

  box-sizing: border-box;
  appearance: none;

  &::placeholder {
    color: var(--placeholder-color);

    font-family: inherit;
    font-style: var(--placeholder-font-style);
    font-weight: var(--placeholder-font-weight);

    opacity: var(--placeholder-opacity);
  }

  &:-webkit-autofill {
    background-color: transparent;
  }

  &:invalid {
    box-shadow: none;
  }

  &::-ms-clear {
    display: none;
  }
}

.native-input[disabled] {
  opacity: .4;
}



// Input Cover: Unfocused
// --------------------------------------------------
// The input cover is the div that actually receives the
// tap/click event when scroll assist is configured to true.
// This make it so the native input element is not clickable.
// This will only show when the scroll assist is configured
// otherwise the .input-cover will not be rendered at all
// The input cover is not clickable when the input is disabled
.cloned-input {
  @include position(0, null, null, 0);

  position: absolute;

  pointer-events: none;
}


// Clear Input Icon
// --------------------------------------------------

.input-clear-icon {
  @include margin(0);
  @include padding(0);
  @include background-position(center);

  border: 0;

  outline: none;

  background-color: transparent;
  background-repeat: no-repeat;

  visibility: hidden;
  appearance: none;
}

/**
 * Normally, we would not want to use :focus
 * here because that would mean tapping the button
 * on mobile would focus it (and keep it focused).
 * However, the clear button always disappears after
 * being activated, so we never get to that state.
 */
.input-clear-icon:focus {
  opacity: 0.5;
}

:host(.has-value) .input-clear-icon {
  visibility: visible;
}


// Input Has focus
// --------------------------------------------------
// When the input has focus, then the input cover should be hidden

:host(.has-focus) {
  pointer-events: none;
}

:host(.has-focus) input,
:host(.has-focus) a,
:host(.has-focus) button {
  pointer-events: auto;
}


// Item Floating: Placeholder
// ----------------------------------------------------------------
// When used with a floating item the placeholder should hide

:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value)) {
  opacity: 0;
}

:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value).item-has-focus) {
  transition: opacity 0.15s cubic-bezier(0.4, 0, 0.2, 1);

  opacity: 1;
}

// Input Wrapper
// ----------------------------------------------------------------

.input-wrapper {
  @include padding(var(--padding-top), var(--padding-end), var(--padding-bottom), var(--padding-start));

  display: flex;

  flex-grow: 1;

  align-items: stretch;

  height: 100%;

  background: inherit;
}

// Input Bottom Content
// ----------------------------------------------------------------

.input-bottom {
  @include padding(5px, 0, 0, 0);

  display: flex;

  justify-content: space-between;

  border-top: var(--border-width) var(--border-style) var(--border-color);

  font-size: 12px;
}

// Input Hint Text
// ----------------------------------------------------------------

/**
 * Error text should only be shown when .ion-invalid is
 * present on the input. Otherwise the helper text should
 * be shown.
 */
.input-bottom .error-text {
  display: none;

  color: var(--highlight-color-invalid);
}

.input-bottom .helper-text {
  display: block;
}

:host(.ion-invalid) .input-bottom .error-text {
  display: block;
}

:host(.ion-invalid) .input-bottom .helper-text {
  display: none;
}

// Input Max Length Counter
// ----------------------------------------------------------------

.input-bottom .counter {
  /**
   * Counter should always be at
   * the end of the container even
   * when no helper/error texts are used.
   */
  @include margin-horizontal(auto, null);

  color: #{$background-color-step-550};

  white-space: nowrap;

  padding-inline-start: 16px;
}

// Input Label
// ----------------------------------------------------------------

.input-wrapper label {
  /**
   * The padding on the label adds visual
   * space between the label and the input.
   * We use padding so that this space can still
   * be clicked to focus the input.
   */
  @include padding(0, 8px, 0, 0);

  /**
   * This causes the label to take up
   * the entire height of its container
   * while still keeping the text centered.
   */
  display: flex;

  align-items: center;

  transition: color 150ms cubic-bezier(.4, 0, .2, 1), transform 150ms cubic-bezier(.4, 0, .2, 1);
}

.input-wrapper input {
  /**
   * When the floating label appears on top of the
   * input, we need to fade the input out so that the
   * label does not overlap with the placeholder.
   */
  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);
}

// Input Label Placement
// ----------------------------------------------------------------

/**
 * Label is on the left of the input in LTR and
 * on the right in RTL.
 */
:host(.input-label-placement-start) .input-wrapper {
  flex-direction: row;
}

/**
 * Label is on the right of the input in LTR and
 * on the left in RTL.
 */
:host(.input-label-placement-end) .input-wrapper {
  flex-direction: row-reverse;
}

/**
 * The padding on the label adds visual
 * space between the label and the input.
 * We use padding so that this space can still
 * be clicked to focus the input.
 */
:host(.input-label-placement-end) label {
  @include padding(0, 0, 0, 8px);
}

/**
 * Label is on the left of the input in LTR and
 * on the right in RTL. Label also has a fixed width.
 */
:host(.input-label-placement-fixed) label {
  @include margin(0, 0, 0, 0);

  flex: 0 0 100px;

  width: 100px;
  min-width: 100px;
  max-width: 200px;
}

/**
 * Stacked: Label sits above the input and is scaled down.
 * Floating: Label sits over the input when the input has no
 * value and is blurred. Label sits above the input and is scaled
 * down when the input is focused or has a value.
 *
 */
:host(.input-label-placement-stacked) .input-wrapper,
:host(.input-label-placement-floating) .input-wrapper {
  flex-direction: column;
  align-items: start;
}

/**
 * Ensures that the label animates
 * up and to the left in LTR or
 * up and to the right in RTL.
 */
:host(.input-label-placement-stacked) label,
:host(.input-label-placement-floating) label {
  @include transform-origin(start, top);
}

/**
 * Ensures the input does not
 * overlap the label.
 */
:host(.input-label-placement-stacked) input,
:host(.input-label-placement-floating) input {
  @include margin(1px, 0, 0, 0);
}

/**
 * This makes the label sit over the input
 * when the input is blurred and has no value.
 */
:host(.input-label-placement-floating) label {
  @include transform(translateY(100%), scale(1));
}

/**
 * The input should be hidden when the label
 * is on top of the input. This prevents the label
 * from overlapping any placeholder value.
 */
:host(.input-label-placement-floating) input {
  opacity: 0;
}

:host(.has-focus.input-label-placement-floating) input,
:host(.has-value.input-label-placement-floating) input {
  opacity: 1;
}

/**
 * This makes the label sit above the input.
 */
:host(.input-label-placement-stacked) label,
:host(.has-focus.input-label-placement-floating) label,
:host(.has-value.input-label-placement-floating) label {
  @include transform(translateY(50%), scale(.75));
}
