@import "./textarea.vars";

// Textarea
// --------------------------------------------------

:host {
  /**
   * @prop --background: Background of the textarea
   *
   * @prop --border-radius: Border radius of the textarea
   * @prop --border-color: Color of the border below the textarea when using helper text, error text, or counter
   * @prop --border-radius: Radius of the textarea border
   * @prop --border-style: Style of the border below the textarea when using helper text, error text, or counter
   * @prop --border-width: Width of the border below the textarea when using helper text, error text, or counter
   *
   * @prop --color: Color of the text
   *
   * @prop --placeholder-color: Color of the placeholder text
   * @prop --placeholder-font-style: Style of the placeholder text
   * @prop --placeholder-font-weight: Weight of the placeholder text
   * @prop --placeholder-opacity: Opacity of the placeholder text
   *
   * @prop --highlight-color-focused: The color of the highlight on the textarea when focused
   * @prop --highlight-color-valid: The color of the highlight on the textarea when valid
   * @prop --highlight-color-invalid: The color of the highlight on the textarea when invalid
   *
   * @prop --padding-top: Top padding of the textarea
   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the textarea
   * @prop --padding-bottom: Bottom padding of the textarea
   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the textarea
   */
  --background: initial;
  --color: initial;
  --placeholder-color: initial;
  --placeholder-font-style: initial;
  --placeholder-font-weight: initial;
  --placeholder-opacity: 0.5;
  --padding-top: 0;
  --padding-end: 0;
  --padding-bottom: 0;
  --padding-start: 0;
  --border-radius: 0;
  --border-style: solid;
  --highlight-color-focused: #{ion-color(primary, base)};
  --highlight-color-valid: #{ion-color(success, base)};
  --highlight-color-invalid: #{ion-color(danger, base)};

  display: block;
  position: relative;

  width: 100%;

  background: var(--background);
  color: var(--color);

  font-family: $font-family-base;

  z-index: $z-index-item-input;

  box-sizing: border-box;
}

:host(.legacy-textarea) {
  flex: 1;

  white-space: pre-wrap;
}

:host(.ion-color) {
  background: initial;
}

:host(.ion-color) {
  color: current-color(base);
}

// Textarea Within An Item
// --------------------------------------------------

:host-context(ion-item) {
  align-self: baseline;
}

:host-context(ion-item:not(.item-label)) {
  --padding-start: 0;
}

// Native Textarea
// --------------------------------------------------

.textarea-legacy-wrapper {
  display: grid;

  min-width: inherit;
  max-width: inherit;
  min-height: inherit;
  max-height: inherit;

  &::after {
    // This technique is used for an auto-resizing textarea.
    // The text contents are reflected as a pseudo-element that is visually hidden.
    // This causes the textarea container to grow as needed to fit the contents.

    white-space: pre-wrap;

    content: attr(data-replicated-value) " ";

    visibility: hidden;
  }
}

.native-textarea,
.textarea-legacy-wrapper::after {
  @include padding(var(--padding-top), var(--padding-end), var(--padding-bottom), var(--padding-start));
  @include text-inherit();

  grid-area: 1 / 1 / 2 / 2;

  word-break: break-word;
}

.native-textarea {
  @include border-radius(var(--border-radius));
  @include margin(0);

  display: block;

  width: 100%;
  max-width: 100%;
  max-height: 100%;

  border: 0;

  outline: none;

  background: transparent;
  box-sizing: border-box;
  resize: none;
  appearance: none;

  &::placeholder {
    @include padding(0);

    color: var(--placeholder-color);

    font-family: inherit;
    font-style: var(--placeholder-font-style);
    font-weight: var(--placeholder-font-weight);

    opacity: var(--placeholder-opacity);
  }
}

.native-textarea[disabled]:not(.cloned-input) {
  opacity: 0.4;
}

// Input Cover: Unfocused
// --------------------------------------------------
// The input cover is the div that actually receives the
// tap/click event when scroll assist is configured to true.
// This make it so the native input element is not clickable.
// This will only show when the scroll assist is configured
// otherwise the .input-cover will not be rendered at all
// The input cover is not clickable when the input is disabled
.cloned-input {
  @include position(0, null, null, 0);

  position: absolute;

  pointer-events: none;
}

/**
 * The cloned input needs to be disabled on
 * Android otherwise the viewport will still
 * shift when running scroll assist.
 */
.cloned-input:disabled {
  opacity: 1;
}

:host([auto-grow="true"]) .cloned-input {
  // Workaround for webkit rendering issue with scroll assist.
  // When cloning the textarea and scrolling into view,
  // a white box is rendered from the difference in height
  // from the auto grow container.
  // This change forces the cloned input to match the true
  // height of the textarea container.
  height: 100%;
}

// Item Floating: Placeholder
// ----------------------------------------------------------------
// When used with a floating item the placeholder should hide

:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value)) {
  opacity: 0;
}

:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value).item-has-focus) {
  transition: opacity 0.15s cubic-bezier(0.4, 0, 0.2, 1);

  opacity: 1;
}

:host([auto-grow="true"]) .native-textarea {
  overflow: hidden;
}

// Textarea Wrapper
// ----------------------------------------------------------------
.textarea-wrapper {
  display: flex;

  flex-grow: 1;

  align-items: center;
}

// Native Wrapper
// ----------------------------------------------------------------

.native-wrapper {
  flex: 1;
}

// Textarea Bottom Content
// ----------------------------------------------------------------

.textarea-bottom {
  @include padding(5px, 0, 0, 0);

  display: flex;

  justify-content: space-between;

  border-top: var(--border-width) var(--border-style) var(--border-color);

  font-size: 12px;
}

// Textarea Hint Text
// ----------------------------------------------------------------

/**
 * Error text should only be shown when .ion-invalid is
 * present on the textarea. Otherwise the helper text should
 * be shown.
 */
.textarea-bottom .error-text {
  display: none;

  color: var(--highlight-color-invalid);
}

.textarea-bottom .helper-text {
  display: block;
}

:host(.ion-invalid) .textarea-bottom .error-text {
  display: block;
}

:host(.ion-invalid) .textarea-bottom .helper-text {
  display: none;
}
