@import "./col.vars";

// Column
// --------------------------------------------------

:host {
  /**
   * @prop --col-unit-size: The size of each Column unit.
   */
  --col-unit-size: calc(
    (100% - (var(--ion-grid-columns, 12) - 1) * var(--ion-grid-gap, 0px)) / var(--ion-grid-columns, 12)
  );

  /**
   * @prop --ion-grid-columns: The number of total Columns in the Grid
   * @prop --ion-grid-column-padding: Padding for the Column
   * @prop --ion-grid-column-padding-xs: Padding for the Column on xs screens and up
   * @prop --ion-grid-column-padding-sm: Padding for the Column on sm screens and up
   * @prop --ion-grid-column-padding-md: Padding for the Column on md screens and up
   * @prop --ion-grid-column-padding-lg: Padding for the Column on lg screens and up
   * @prop --ion-grid-column-padding-xl: Padding for the Column on xl screens and up
   */
  @include make-breakpoint-padding($grid-column-paddings);
  @include margin(0);

  box-sizing: border-box;

  position: relative;

  flex: 1;

  min-height: 1px; // Prevent columns from collapsing when empty
}

:host(.ion-grid-col-auto) {
  flex: 0 0 auto;
}

:host([class^="ion-grid-col--"]),
:host([class*=" ion-grid-col--"]) {
  flex: 0 0
    calc(var(--ion-grid-col-span) * var(--col-unit-size) + (var(--ion-grid-col-span) - 1) * var(--ion-grid-gap, 0px));

  max-width: calc(
    var(--ion-grid-col-span) * var(--col-unit-size) + (var(--ion-grid-col-span) - 1) * var(--ion-grid-gap, 0px)
  );
}

:host([class^="ion-grid-offset-col--"]),
:host([class*=" ion-grid-offset-col--"]) {
  --margin-calc: calc(
    var(--col-unit-size) * var(--ion-grid-col-margin) + (var(--ion-grid-gap, 0px) * var(--ion-grid-col-margin))
  );

  @include margin-horizontal(var(--margin-calc), 0);
}

// Although the number of columns is customizable, we generate
// a default of 12 columns worth of classes. This will in the 
// future be customizable, even on the generation, when the 
// Ionic becomes modular and configurable by the developer.
// For now, this is a reasonable default. If the developer
// changes the number of columns, they can still use the
// col-span and offset classes that are generated here, and
// if more than 12 columns are needed, they can always
// write their own CSS to handle those cases, since we cover
// the general case here.
$grid-col-number: 12;

@for $i from 1 through $grid-col-number {
  :host(.ion-grid-col--#{$i}) {
    --ion-grid-col-span: #{$i};
  }

  :host(.ion-grid-order-col--#{$i}) {
    order: #{$i};
  }

  :host(.ion-grid-offset-col--#{$i}) {
    --ion-grid-col-margin: #{$i};
  }
}
