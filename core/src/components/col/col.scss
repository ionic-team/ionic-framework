@import "./col.vars";

// Column
// --------------------------------------------------

:host {
  /**
   * @prop --col-unit-size: The size of each Column unit.
   */
  --col-unit-size: calc((100% - (var(--ion-grid-columns, 12) - 1) * var(--ion-grid-gap)) / var(--ion-grid-columns, 12));
  
  /**
   * @prop --ion-grid-columns: The number of total Columns in the Grid
   * @prop --ion-grid-column-padding: Padding for the Column
   * @prop --ion-grid-column-padding-xs: Padding for the Column on xs screens and up
   * @prop --ion-grid-column-padding-sm: Padding for the Column on sm screens and up
   * @prop --ion-grid-column-padding-md: Padding for the Column on md screens and up
   * @prop --ion-grid-column-padding-lg: Padding for the Column on lg screens and up
   * @prop --ion-grid-column-padding-xl: Padding for the Column on xl screens and up
   */
  @include make-breakpoint-padding($grid-column-paddings);
  @include margin(0);

  box-sizing: border-box;

  position: relative;

  flex-basis: 0;
  flex-grow: 1;

  width: 100%;
  max-width: 100%;
  min-height: 1px; // Prevent columns from collapsing when empty
}

:host(.ion-grid-col-auto){
  flex: 0 0 auto;
}

:host(
  [class^="ion-grid-col-"], 
  [class*=" ion-grid-col-"]) {
    flex: 0 0
      calc(var(--ion-grid-col-span) * var(--col-unit-size) + 
      (var(--ion-grid-col-span) - 1) * var(--ion-grid-gap));
}

:host(
  [class^="ion-grid-offset-col-"],
  [class*=" ion-grid-offset-col-"]) {
    --margin-calc: calc(var(--col-unit-size) * var(--ion-grid-col-margin) + (var(--ion-grid-gap) * var(--ion-grid-col-margin)));
    
    @include margin-horizontal(var(--margin-calc), 0);
}

$max: 12;
@for $i from 1 through $max {
  .ion-grid-col-#{$i} { --ion-grid-col-span: #{$i}; }
  .ion-grid-order-col-#{$i} { order: #{$i}; }
  .ion-grid-offset-col-#{$i} { --ion-grid-col-margin: #{$i};}
}
