{"version":3,"file":"static/js/22.e95f5e16.chunk.js","mappings":"sMAOMA,EAAyB,SAACC,EAAIC,EAAiBC,EAAgBC,EAAeC,GAClF,IAAMC,EAAML,EAAGM,cAAcC,YACzBC,GAAMC,EAAAA,EAAAA,GAAMT,GAcVU,EAAY,SAACC,GACjB,OAAOH,GAAOG,EAAOC,OAASD,EAAOC,QAqCvC,OAAOC,EAAAA,EAAAA,eAAc,CACnBb,GAAAA,EACAc,YAAa,eACbC,gBAAiB,GACjBC,UAAW,GACXC,SArCe,SAACN,GAOhB,OADAH,GAAMC,EAAAA,EAAAA,GAAMT,GApBG,SAACW,GAChB,IACQO,EAAWP,EAAXO,OACR,OAAIV,EACKU,GAAUb,EAAIc,WAHL,GAKXD,GALW,GAoBXE,CAAST,IAAWV,KA+B3BoB,QAASnB,EACToB,OA9Ba,SAACX,GAEd,IACMY,EADQb,EAAUC,GACEN,EAAIc,WAC9BhB,EAAcoB,IA2BdC,MAzBY,SAACb,GAEb,IAAMc,EAAQf,EAAUC,GAClBe,EAAQrB,EAAIc,WACZI,EAAYE,EAAQC,EACpBC,EAvBa,SAAChB,GACpB,OAAOH,GAAOG,EAAOiB,UAAYjB,EAAOiB,UAsBvBC,CAAalB,GAExBmB,EAAiBH,GAAY,IAAMA,EAAW,IAAOF,EADjDC,EAAQ,GAGZK,GADUD,EAAiB,EAAIP,EAAYA,GACfG,EAC9BM,EAAU,EACd,GAAID,EAAkB,EAAG,CACvB,IAAME,EAAMF,EAAkBG,KAAKC,IAAIR,GACvCK,EAAUE,KAAKE,IAAIH,EAAK,KAE1B7B,EAAa0B,EAAgBP,GAAa,EAAI,KAAOc,EAAAA,EAAAA,GAAM,EAAGd,EAAW,OAASS","sources":["../node_modules/@ionic/core/components/swipe-back.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { h as clamp } from './helpers.js';\nimport { i as isRTL } from './dir.js';\nimport { createGesture } from './index2.js';\n\nconst createSwipeBackGesture = (el, canStartHandler, onStartHandler, onMoveHandler, onEndHandler) => {\n  const win = el.ownerDocument.defaultView;\n  let rtl = isRTL(el);\n  /**\n   * Determine if a gesture is near the edge\n   * of the screen. If true, then the swipe\n   * to go back gesture should proceed.\n   */\n  const isAtEdge = (detail) => {\n    const threshold = 50;\n    const { startX } = detail;\n    if (rtl) {\n      return startX >= win.innerWidth - threshold;\n    }\n    return startX <= threshold;\n  };\n  const getDeltaX = (detail) => {\n    return rtl ? -detail.deltaX : detail.deltaX;\n  };\n  const getVelocityX = (detail) => {\n    return rtl ? -detail.velocityX : detail.velocityX;\n  };\n  const canStart = (detail) => {\n    /**\n     * The user's locale can change mid-session,\n     * so we need to check text direction at\n     * the beginning of every gesture.\n     */\n    rtl = isRTL(el);\n    return isAtEdge(detail) && canStartHandler();\n  };\n  const onMove = (detail) => {\n    // set the transition animation's progress\n    const delta = getDeltaX(detail);\n    const stepValue = delta / win.innerWidth;\n    onMoveHandler(stepValue);\n  };\n  const onEnd = (detail) => {\n    // the swipe back gesture has ended\n    const delta = getDeltaX(detail);\n    const width = win.innerWidth;\n    const stepValue = delta / width;\n    const velocity = getVelocityX(detail);\n    const z = width / 2.0;\n    const shouldComplete = velocity >= 0 && (velocity > 0.2 || delta > z);\n    const missing = shouldComplete ? 1 - stepValue : stepValue;\n    const missingDistance = missing * width;\n    let realDur = 0;\n    if (missingDistance > 5) {\n      const dur = missingDistance / Math.abs(velocity);\n      realDur = Math.min(dur, 540);\n    }\n    onEndHandler(shouldComplete, stepValue <= 0 ? 0.01 : clamp(0, stepValue, 0.9999), realDur);\n  };\n  return createGesture({\n    el,\n    gestureName: 'goback-swipe',\n    gesturePriority: 40,\n    threshold: 10,\n    canStart,\n    onStart: onStartHandler,\n    onMove,\n    onEnd,\n  });\n};\n\nexport { createSwipeBackGesture };\n"],"names":["createSwipeBackGesture","el","canStartHandler","onStartHandler","onMoveHandler","onEndHandler","win","ownerDocument","defaultView","rtl","isRTL","getDeltaX","detail","deltaX","createGesture","gestureName","gesturePriority","threshold","canStart","startX","innerWidth","isAtEdge","onStart","onMove","stepValue","onEnd","delta","width","velocity","velocityX","getVelocityX","shouldComplete","missingDistance","realDur","dur","Math","abs","min","clamp"],"sourceRoot":""}